<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gopher LLM</title>
  <style>
    pre {
      max-width: 25vw;
      overflow: auto;
    }
    h3 {
      background-color: lightcyan;
      margin-top: 12px;
    }
    #grid {
      /* margin: 1%; */
      .correct h3 {
        background-color: lightgreen;
      }
    }
    #grid div {
      margin-right: 2%;
    }
  </style>
</head>
<body>
  <button id="wordwrap">Toggle Word Wrap</button> <strong>Go git diff data extraction and classification task for Minecraft</strong>
  <div id="grid" style='display: flex; flex-direction: row;'>
    <div>
      <h3>System Prompt</h3>
      <pre id="psys">SYS PROMPT</pre>
    </div>
    <div>
      <h3>User Prompt</h3>
      <pre id="pusr">USR PROMPT</pre>
    </div>
    <div><h3>GPT-3.5 Turbo 16k</h3><pre id="presp3516turbo">MODEL OUTPUT</pre></div>
<div class="correct"><h3>GPT-4 Turbo Preview</h3><pre id="prespgpt4turbo">MODEL OUTPUT</pre></div>
<div><h3>Gemini 1.0 Pro</h3><pre id="prespgemini">MODEL OUTPUT</pre></div>
  </div>

  <script>
    function toggleWordWrap () {
      const $pre = document.querySelectorAll('pre');
      for (const $p of $pre) {
        $p.style.whiteSpace = $p.style.whiteSpace === 'pre-wrap' ? 'pre' : 'pre-wrap';
      }
    }
    wordwrap.onclick = toggleWordWrap;
    toggleWordWrap();

    const $psys = document.getElementById('psys');
    const $pusr = document.getElementById('pusr');

    const data = {"models":[["GPT-3.5 Turbo 16k","3516turbo"],["GPT-4 Turbo Preview","gpt4turbo"],["Gemini 1.0 Pro","gemini"]],"outputs":{"3516turbo":"{\n  \"metadata_changed\": {\n    \"version\": { \"old\": \"1.20.50\", \"new\": \"1.20.60\", \"source\": [\"minecraft/protocol/info.go\"] }\n  },\n  \"packets_removed\": {\n    \"add_entity\": { \"source\": [\"minecraft/protocol/packet/add_entity.go\"] },\n    \"remove_entity\": { \"source\": [\"minecraft/protocol/packet/remove_entity.go\"] }\n  },\n  \"packets_added\": {\n    \"set_hud\": { \"source\": [\"minecraft/protocol/packet/set_hud.go\"] }\n  }\n}","gpt4turbo":"```json\n{\n  \"metadata_changed\": {\n    \"version\": {\n      \"old\": \"1.20.50\",\n      \"new\": \"1.20.60\",\n      \"source\": [\n        \"minecraft/protocol/info.go\"\n      ]\n    },\n    \"protocol\": {\n      \"old\": 630,\n      \"new\": 649,\n      \"source\": [\n        \"minecraft/protocol/info.go\"\n      ]\n    }\n  },\n  \"packets_removed\": {\n    \"add_entity\": {\n      \"source\": [\n        \"minecraft/protocol/packet/add_entity.go\"\n      ]\n    },\n    \"remove_entity\": {\n      \"source\": [\n        \"minecraft/protocol/packet/remove_entity.go\"\n      ]\n    }\n  },\n  \"packets_added\": {\n    \"set_hud\": {\n      \"source\": [\n        \"minecraft/protocol/packet/set_hud.go\"\n      ]\n    }\n  },\n  \"packets_modified\": {\n    \"level_chunk\": {\n      \"source\": [\n        \"minecraft/protocol/packet/level_chunk.go\"\n      ]\n    },\n    \"level_event\": {\n      \"source\": [\n        \"minecraft/protocol/packet/level_event.go\"\n      ]\n    },\n    \"player_auth_input\": {\n      \"source\": [\n        \"minecraft/protocol/packet/player_auth_input.go\"\n      ]\n    }\n  },\n  \"unclassified_serializer_changes\": {\n    \"minecraft/protocol/player.go\": \"Added a field 'SubClient' to PlayerListEntry\",\n    \"minecraft/protocol/packet/encoder.go\": \"Added use of a header for compression algorithm ID in encoding process\",\n    \"minecraft/protocol/packet/decoder.go\": \"Modified decompression process to handle different algorithms dynamically\",\n    \"minecraft/conn.go\": \"Changed to use dynamic decompression in Decoder without specifying compression algorithm\"\n  }\n}\n```","gemini":"```ts\n{\n  \"metadata_changed\": {\n    \"version\": { \"old\": \"1.20.50\", \"new\": \"1.20.60\", \"source\": [\"minecraft/protocol/info.go\"] },\n    \"protocol\": { \"old\": 630, \"new\": 649, \"source\": [\"minecraft/protocol/info.go\"] }\n  },\n  \"packets_removed\": {\n    \"add_entity\": { \"source\": [\"minecraft/protocol/packet/add_entity.go\"] },\n    \"remove_entity\": { \"source\": [\"minecraft/protocol/packet/remove_entity.go\"] }\n  },\n  \"packets_added\": {\n    \"set_hud\": { \"source\": [\"minecraft/protocol/packet/set_hud.go\"] }\n  },\n  \"packets_modified\": {\n    \"network_settings\": { \"source\": [\"minecraft/protocol/packet/network_settings.go\"] },\n    \"decoder\": { \"source\": [\"minecraft/protocol/packet/decoder.go\"] },\n    \"encoder\": { \"source\": [\"minecraft/protocol/packet/encoder.go\"] },\n    \"level_chunk\": { \"source\": [\"minecraft/protocol/packet/level_chunk.go\"] },\n    \"level_event\": { \"source\": [\"minecraft/protocol/packet/level_event.go\"] },\n    \"player_auth_input\": { \"source\": [\"minecraft/protocol/packet/player_auth_input.go\"] },\n    \"pool\": { \"source\": [\"minecraft/protocol/packet/pool.go\"] },\n    \"player\": { \"source\": [\"minecraft/protocol/player.go\"] }\n  },\n  \"unclassified_serializer_changes\": {}\n}\n```"},"system":"Gophertunnel is a protocol library for Minecraft Bedrock Edition.\r\nThe protocol for Minecraft Bedrock Edition allows for clients and servers to communicate with custom binary packets. Gophertunnel's code handles the\r\nnetworking and serialization (encoding and decoding) aspects of the protocol, which can be used to create custom clients and servers for Minecraft.\r\nPeriodically, the protocol for Minecraft Bedrock Edition is updated, and Gophertunnel's code has to be updated to support the new protocol version.\r\nJust recently, Gophertunnel was updated for Minecraft version 1.20.50, and the code diff to support that is shown below.\r\nYour job is to take a git diff, and convert it into machine-readable JSON describing the changes and their sources.\r\n\r\nThe expected output schema for the JSON looks like this:\r\n```ts\r\ntype Source = string[] // A list of strings with paths of files related to the change\r\ninterface {\r\n  // Metadata changes, unrelated to packets\r\n  metadata_changed: {\r\n    version?: { old: string, new: string, source: Source },\r\n    protocol?: { old: number, new: number, source: Source }\r\n  },\r\n  // packets_removed, packets_added, and packets_modified are all objects with packet names as keys\r\n  packets_removed: {\r\n    [packet_name: string]: { source: Source }\r\n  },\r\n  packets_added: {\r\n    [packet_name: string]: { source: Source }\r\n  },\r\n  // if a new field to a packet was added or removed, or some metadata related to a packet changed (such as addition of a field to an enum), it should be included here\r\n  packets_modified: {\r\n    [packet_name: string]: { source: Source }\r\n  },\r\n  // If a serializer-related change happened or there was a protocol-related change that doesn't fit into the above categories (like adding something to an enum), it should be included here.\r\n  // The key is the source file, and the value is a string describing the change\r\n  unclassified_serializer_changes: {\r\n    [source_file: string]: string\r\n  }\r\n}\r\n```\r\n\r\nFor example, given the following diff:\r\n```diff\r\ndiff --git a/minecraft/protocol/container.go b/minecraft/protocol/container.go\r\nindex b228e557..daac53ea 100644\r\n--- a/minecraft/protocol/container.go\r\n+++ b/minecraft/protocol/container.go\r\n@@ -63,6 +63,7 @@ const (\r\n   ContainerCursor\r\n   ContainerCreatedOutput\r\n   ContainerSmithingTableTemplate\r\n+\tContainerCrafterLevelEntity\r\n )\r\n \r\n const (\r\n@@ -102,4 +103,6 @@ const (\r\n   ContainerTypeJigsawEditor\r\n   ContainerTypeSmithingTable\r\n   ContainerTypeChestBoat\r\n+\tContainerTypeDecoratedPot\r\n+\tContainerTypeCrafter\r\n )\r\ndiff --git a/minecraft/protocol/info.go b/minecraft/protocol/info.go\r\nindex 1a2e0a87..7b091441 100644\r\n--- a/minecraft/protocol/info.go\r\n+++ b/minecraft/protocol/info.go\r\n@@ -2,7 +2,7 @@ package protocol\r\n \r\n const (\r\n   // CurrentProtocol is the current protocol version for the version below.\r\n-\tCurrentProtocol = 622\r\n+\tCurrentProtocol = 630\r\n   // CurrentVersion is the current version of Minecraft as supported by the `packet` package.\r\n-\tCurrentVersion = \"1.20.40\"\r\n+\tCurrentVersion = \"1.20.50\"\r\n )\r\ndiff --git a/minecraft/protocol/packet/compression.go b/minecraft/protocol/packet/compression.go\r\nindex ffa33aa2..77b23e4c 100644\r\n--- a/minecraft/protocol/packet/compression.go\r\n+++ b/minecraft/protocol/packet/compression.go\r\n@@ -54,7 +54,7 @@ var (\r\n \r\n func (flateCompression) EncodeCompression() uint16 {\r\n-\treturn 0\r\n+\treturn CompressionAlgorithmFlate\r\n }\r\n \r\n@@ -103,7 +103,7 @@ func (flateCompression) Decompress(compressed []byte) ([]byte, error) {\r\n \r\n func (snappyCompression) EncodeCompression() uint16 {\r\n-\treturn 1\r\n+\treturn CompressionAlgorithmSnappy\r\n }\r\n \r\ndiff --git a/minecraft/protocol/packet/crafting_event.go b/minecraft/protocol/packet/crafting_event.go\r\ndeleted file mode 100644\r\nindex d24c55f2..00000000\r\n--- a/minecraft/protocol/packet/crafting_event.go\r\n+++ /dev/null\r\n@@ -1,38 +0,0 @@\r\n-package packet\r\n-\r\n-// CraftingEvent is sent by the client when it crafts a particular item. Note that this packet may be fully\r\n-// ignored, as the InventoryTransaction packet provides all the information required.\r\n-type CraftingEvent struct {\r\n-\t// WindowID is the ID representing the window that the player crafted in.\r\n-\tWindowID byte\r\n-\t// CraftingType is a type that indicates the way the crafting was done, for example if a crafting table\r\n-\t// was used.\r\n-\tCraftingType int32\r\n-\t// RecipeUUID is the UUID of the recipe that was crafted. It points to the UUID of the recipe that was\r\n-\t// sent earlier in the CraftingData packet.\r\n-\tRecipeUUID uuid.UUID\r\n-\t// Input is a list of items that the player put into the recipe so that it could create the Output items.\r\n-\t// These items are consumed in the process.\r\n-\tInput []protocol.ItemInstance\r\n-\t// Output is a list of items that were obtained as a result of crafting the recipe.\r\n-\tOutput []protocol.ItemInstance\r\n-}\r\n-\r\n-func (*CraftingEvent) ID() uint32 {\r\n-\treturn IDCraftingEvent\r\n-}\r\n-\r\n-func (pk *CraftingEvent) Marshal(io protocol.IO) {\r\n-\tio.Uint8(&pk.WindowID)\r\n-\tio.Varint32(&pk.CraftingType)\r\n-\tio.UUID(&pk.RecipeUUID)\r\n-\tprotocol.FuncSlice(io, &pk.Input, io.ItemInstance)\r\n-\tprotocol.FuncSlice(io, &pk.Output, io.ItemInstance)\r\n-}\r\ndiff --git a/minecraft/protocol/packet/id.go b/minecraft/protocol/packet/id.go\r\nindex 0c104158..e24abccc 100644\r\n--- a/minecraft/protocol/packet/id.go\r\n+++ b/minecraft/protocol/packet/id.go\r\n@@ -53,7 +53,7 @@ const (\r\n   IDInventorySlot\r\n   IDContainerSetData\r\n   IDCraftingData\r\n-\tIDCraftingEvent\r\n+\t_\r\n   IDGUIDataPickItem\r\n   IDAdventureSettings\r\n   IDBlockActorData\r\n@@ -206,4 +206,6 @@ const (\r\n   IDOpenSign\r\n   IDAgentAnimation\r\n   IDRefreshEntitlements\r\n+\tIDPlayerToggleCrafterSlotRequest\r\n+\tIDSetPlayerInventoryOptions\r\n )\r\ndiff --git a/minecraft/protocol/packet/level_event.go b/minecraft/protocol/packet/level_event.go\r\nindex 15560f6f..4b02bfaa 100644\r\n--- a/minecraft/protocol/packet/level_event.go\r\n+++ b/minecraft/protocol/packet/level_event.go\r\n@@ -86,6 +86,7 @@ const (\r\n   LevelEventSculkCharge                  = 2037\r\n   LevelEventSculkChargePop               = 2038\r\n   LevelEventSonicExplosion               = 2039\r\n+\tLevelEventDustPlume                    = 2040\r\n   LevelEventStartRaining                 = 3001\r\n   LevelEventStartThunderstorm            = 3002\r\n   LevelEventStopRaining                  = 3003\r\n@@ -118,6 +119,7 @@ const (\r\n   LevelEventParticlesCrackBlockSouth     = 3606\r\n   LevelEventParticlesCrackBlockWest      = 3607\r\n   LevelEventParticlesCrackBlockEast      = 3608\r\n+\tLevelEventParticlesShootWhiteSmoke     = 3609\r\n   LevelEventAllPlayersSleeping           = 9800\r\n   LevelEventSleepingPlayers              = 9801\r\n   LevelEventJumpPrevented                = 9810\r\ndiff --git a/minecraft/protocol/packet/level_sound_event.go b/minecraft/protocol/packet/level_sound_event.go\r\nindex 51d4f4c6..dbf39c79 100644\r\n--- a/minecraft/protocol/packet/level_sound_event.go\r\n+++ b/minecraft/protocol/packet/level_sound_event.go\r\n@@ -486,6 +486,13 @@ const (\r\n   SoundEventAmbientUnderwaterExit\r\n   SoundEventBottleFill\r\n   SoundEventBottleEmpty\r\n+\tSoundEventCrafterCraft\r\n+\tSoundEventCrafterFail\r\n+\tSoundEventDecoratedPotInsert\r\n+\tSoundEventDecoratedPotInsertFail\r\n+\tSoundEventCrafterDisableSlot\r\n+\tSoundEventCopperBulbTurnOn\r\n+\tSoundEventCopperBulbTurnOff\r\n )\r\n \r\n // LevelSoundEvent is sent by the server to make any kind of built-in sound heard to a player. It is sent to,\r\ndiff --git a/minecraft/protocol/packet/network_settings.go b/minecraft/protocol/packet/network_settings.go\r\nindex d70c2b6d..98c27ef8 100644\r\n--- a/minecraft/protocol/packet/network_settings.go\r\n+++ b/minecraft/protocol/packet/network_settings.go\r\n@@ -4,6 +4,12 @@ import (\r\n   \"github.com/sandertv/gophertunnel/minecraft/protocol\"\r\n )\r\n \r\n+const (\r\n+\tCompressionAlgorithmFlate = iota\r\n+\tCompressionAlgorithmSnappy\r\n+\tCompressionAlgorithmNone = 0xffff\r\n+)\r\n+\r\n // NetworkSettings is sent by the server to update a variety of network settings. These settings modify the\r\n // way packets are sent over the network stack.\r\n type NetworkSettings struct {\r\ndiff --git a/minecraft/protocol/packet/player_toggle_crafter_slot_request.go b/minecraft/protocol/packet/player_toggle_crafter_slot_request.go\r\nnew file mode 100644\r\nindex 00000000..66f5fbc3\r\n--- /dev/null\r\n+++ b/minecraft/protocol/packet/player_toggle_crafter_slot_request.go\r\n@@ -0,0 +1,32 @@\r\n+package packet\r\n+\r\n+// PlayerToggleCrafterSlotRequest is sent by the client when it tries to toggle the state of a slot within a Crafter.\r\n+type PlayerToggleCrafterSlotRequest struct {\r\n+\t// PosX is the X position of the Crafter that is being modified.\r\n+\tPosX int32\r\n+\t// PosY is the Y position of the Crafter that is being modified.\r\n+\tPosY int32\r\n+\t// PosZ is the Z position of the Crafter that is being modified.\r\n+\tPosZ int32\r\n+\t// Slot is the index of the slot that was toggled. This should be a value between 0 and 8.\r\n+\tSlot byte\r\n+\t// Disabled is the new state of the slot. If true, the slot is disabled, if false, the slot is enabled.\r\n+\tDisabled bool\r\n+}\r\n+\r\n+func (*PlayerToggleCrafterSlotRequest) ID() uint32 {\r\n+\treturn IDPlayerToggleCrafterSlotRequest\r\n+}\r\n+\r\n+func (pk *PlayerToggleCrafterSlotRequest) Marshal(io protocol.IO) {\r\n+\tio.Int32(&pk.PosX)\r\n+\tio.Int32(&pk.PosY)\r\n+\tio.Int32(&pk.PosZ)\r\n+\tio.Uint8(&pk.Slot)\r\n+\tio.Bool(&pk.Disabled)\r\n+}\r\ndiff --git a/minecraft/protocol/packet/pool.go b/minecraft/protocol/packet/pool.go\r\nindex 896c5677..88691e82 100644\r\n--- a/minecraft/protocol/packet/pool.go\r\n+++ b/minecraft/protocol/packet/pool.go\r\n@@ -98,7 +98,6 @@ func init() {\r\n     IDInventorySlot:               func() Packet { return &InventorySlot{} },\r\n     IDContainerSetData:            func() Packet { return &ContainerSetData{} },\r\n     IDCraftingData:                func() Packet { return &CraftingData{} },\r\n-\t\tIDCraftingEvent:               func() Packet { return &CraftingEvent{} },\r\n     IDGUIDataPickItem:             func() Packet { return &GUIDataPickItem{} },\r\n     IDAdventureSettings:           func() Packet { return &AdventureSettings{} },\r\n     IDBlockActorData:              func() Packet { return &BlockActorData{} },\r\n@@ -245,12 +244,14 @@ func init() {\r\n     IDCameraPresets:                     func() Packet { return &CameraPresets{} },\r\n     IDUnlockedRecipes:                   func() Packet { return &UnlockedRecipes{} },\r\n     // ---\r\n-\t\tIDCameraInstruction:             func() Packet { return &CameraInstruction{} },\r\n-\t\tIDCompressedBiomeDefinitionList: func() Packet { return &CompressedBiomeDefinitionList{} },\r\n-\t\tIDTrimData:                      func() Packet { return &TrimData{} },\r\n-\t\tIDOpenSign:                      func() Packet { return &OpenSign{} },\r\n-\t\tIDAgentAnimation:                func() Packet { return &AgentAnimation{} },\r\n-\t\tIDRefreshEntitlements:           func() Packet { return &RefreshEntitlements{} },\r\n+\t\tIDCameraInstruction:              func() Packet { return &CameraInstruction{} },\r\n+\t\tIDCompressedBiomeDefinitionList:  func() Packet { return &CompressedBiomeDefinitionList{} },\r\n+\t\tIDTrimData:                       func() Packet { return &TrimData{} },\r\n+\t\tIDOpenSign:                       func() Packet { return &OpenSign{} },\r\n+\t\tIDAgentAnimation:                 func() Packet { return &AgentAnimation{} },\r\n+\t\tIDRefreshEntitlements:            func() Packet { return &RefreshEntitlements{} },\r\n+\t\tIDPlayerToggleCrafterSlotRequest: func() Packet { return &PlayerToggleCrafterSlotRequest{} },\r\n+\t\tIDSetPlayerInventoryOptions:      func() Packet { return &SetPlayerInventoryOptions{} },\r\n   }\r\n   for id, pk := range serverOriginating {\r\n     RegisterPacketFromServer(id, pk)\r\n@@ -279,7 +280,6 @@ func init() {\r\n     IDRespawn:                         func() Packet { return &Respawn{} },\r\n     IDContainerOpen:                   func() Packet { return &ContainerOpen{} },\r\n     IDContainerClose:                  func() Packet { return &ContainerClose{} },\r\n-\t\tIDCraftingEvent:                   func() Packet { return &CraftingEvent{} },\r\n     IDAdventureSettings:               func() Packet { return &AdventureSettings{} },\r\n     IDPlayerInput:                     func() Packet { return &PlayerInput{} },\r\n     IDSetPlayerGameType:               func() Packet { return &SetPlayerGameType{} },\r\n@@ -333,6 +333,8 @@ func init() {\r\n     IDGameTestResults:                 func() Packet { return &GameTestResults{} },\r\n     IDOpenSign:                        func() Packet { return &OpenSign{} },\r\n     IDBlockActorData:                  func() Packet { return &BlockActorData{} },\r\n+\t\tIDPlayerToggleCrafterSlotRequest:  func() Packet { return &PlayerToggleCrafterSlotRequest{} },\r\n+\t\tIDSetPlayerInventoryOptions:       func() Packet { return &SetPlayerInventoryOptions{} },\r\n   }\r\n   for id, pk := range clientOriginating {\r\n     RegisterPacketFromClient(id, pk)\r\ndiff --git a/minecraft/protocol/packet/set_player_inventory_options.go b/minecraft/protocol/packet/set_player_inventory_options.go\r\nnew file mode 100644\r\nindex 00000000..1bf50536\r\n--- /dev/null\r\n+++ b/minecraft/protocol/packet/set_player_inventory_options.go\r\n@@ -0,0 +1,58 @@\r\n+package packet\r\n+\r\n+const (\r\n+\tInventoryLayoutNone = iota\r\n+\tInventoryLayoutSurvival\r\n+\tInventoryLayoutRecipeBook\r\n+\tInventoryLayoutCreative\r\n+)\r\n+\r\n+const (\r\n+\tInventoryLeftTabNone = iota\r\n+\tInventoryLeftTabConstruction\r\n+\tInventoryLeftTabEquipment\r\n+\tInventoryLeftTabItems\r\n+\tInventoryLeftTabNature\r\n+\tInventoryLeftTabSearch\r\n+\tInventoryLeftTabSurvival\r\n+)\r\n+\r\n+const (\r\n+\tInventoryRightTabNone = iota\r\n+\tInventoryRightTabFullScreen\r\n+\tInventoryRightTabCrafting\r\n+\tInventoryRightTabArmour\r\n+)\r\n+\r\n+// SetPlayerInventoryOptions is sent by the client when it tries to toggle the state of a slot within a Crafter.\r\n+type SetPlayerInventoryOptions struct {\r\n+\t// LeftInventoryTab is the tab that is selected on the left side of the inventory. This is usually for the creative\r\n+\t// inventory. It is one of the constants above.\r\n+\tLeftInventoryTab byte\r\n+\t// RightInventoryTab is the tab that is selected on the right side of the inventory. This is usually for the player's\r\n+\t// own inventory. It is one of the constants above.\r\n+\tRightInventoryTab byte\r\n+\t// Filtering is whether the player has enabled the filtering between recipes they have unlocked or not.\r\n+\tFiltering bool\r\n+\t// InventoryLayout is the layout of the inventory. It is one of the constants above.\r\n+\tInventoryLayout byte\r\n+\t// CraftingLayout is the layout of the crafting inventory. It is one of the constants above.\r\n+\tCraftingLayout byte\r\n+}\r\n+\r\n+// ID ...\r\n+func (*SetPlayerInventoryOptions) ID() uint32 {\r\n+\treturn IDSetPlayerInventoryOptions\r\n+}\r\n+\r\n+func (pk *SetPlayerInventoryOptions) Marshal(io protocol.IO) {\r\n+\tio.Uint8(&pk.LeftInventoryTab)\r\n+\tio.Uint8(&pk.RightInventoryTab)\r\n+\tio.Bool(&pk.Filtering)\r\n+\tio.Uint8(&pk.InventoryLayout)\r\n+\tio.Uint8(&pk.CraftingLayout)\r\n+}\r\ndiff --git a/minecraft/protocol/packet/show_store_offer.go b/minecraft/protocol/packet/show_store_offer.go\r\nindex 73be5fc5..c7c47907 100644\r\n--- a/minecraft/protocol/packet/show_store_offer.go\r\n+++ b/minecraft/protocol/packet/show_store_offer.go\r\n@@ -4,6 +4,12 @@ import (\r\n   \"github.com/sandertv/gophertunnel/minecraft/protocol\"\r\n )\r\n \r\n+const (\r\n+\tStoreOfferTypeMarketplace = iota\r\n+\tStoreOfferTypeDressingRoom\r\n+\tStoreOfferTypeServerPage\r\n+)\r\n+\r\n // ShowStoreOffer is sent by the server to show a Marketplace store offer to a player. It opens a window\r\n // client-side that displays the item.\r\n // The ShowStoreOffer packet only works on the partnered servers: Servers that are not partnered will not have\r\n@@ -11,12 +17,12 @@ import (\r\n // on the client side. Sending the packet does therefore not work when using a proxy that is not connected to\r\n // with the domain of one of the partnered servers.\r\n type ShowStoreOffer struct {\r\n-\t// OfferID is a string that identifies the offer for which a window should be opened. While typically a\r\n-\t// UUID, the ID could be anything.\r\n+\t// OfferID is a string that identifies the offer for which a window should be opened. ID should be in the format of\r\n+\t// a UUID, however it can be left empty if StoreOfferTypeServerPage is used.\r\n   OfferID string\r\n-\t// ShowAll specifies if all other offers of the same 'author' as the one of the offer associated with the\r\n-\t// OfferID should also be displayed, alongside the target offer.\r\n-\tShowAll bool\r\n+\t// Type is the type of the store offer that is being shown to the player. It is one of the constants that may be\r\n+\t// found above.\r\n+\tType byte\r\n }\r\n \r\n@@ -26,5 +32,5 @@ func (*ShowStoreOffer) ID() uint32 {\r\n \r\n func (pk *ShowStoreOffer) Marshal(io protocol.IO) {\r\n   io.String(&pk.OfferID)\r\n-\tio.Bool(&pk.ShowAll)\r\n+\tio.Uint8(&pk.Type)\r\n }\r\ndiff --git a/minecraft/protocol/recipe.go b/minecraft/protocol/recipe.go\r\nindex e5f4b7a8..ceba5953 100644\r\n--- a/minecraft/protocol/recipe.go\r\n+++ b/minecraft/protocol/recipe.go\r\n@@ -149,8 +149,7 @@ type ShapelessRecipe struct {\r\n   Input []ItemDescriptorCount\r\n   // Output is a list of items that are created as a result of crafting the recipe.\r\n   Output []ItemStack\r\n-\t// UUID is a UUID identifying the recipe. This can actually be set to an empty UUID if the CraftingEvent\r\n-\t// packet is not used.\r\n+\t// UUID is a UUID identifying the recipe. Since the CraftingEvent packet no longer exists, this can always be empty.\r\n   UUID uuid.UUID\r\n   // Block is the block name that is required to craft the output of the recipe. The block is not prefixed\r\n   // with 'minecraft:', so it will look like 'crafting_table' as an example.\r\n@@ -199,8 +198,7 @@ type ShapedRecipe struct {\r\n   Input []ItemDescriptorCount\r\n   // Output is a list of items that are created as a result of crafting the recipe.\r\n   Output []ItemStack\r\n-\t// UUID is a UUID identifying the recipe. This can actually be set to an empty UUID if the CraftingEvent\r\n-\t// packet is not used.\r\n+\t// UUID is a UUID identifying the recipe. Since the CraftingEvent packet no longer exists, this can always be empty.\r\n   UUID uuid.UUID\r\n   // Block is the block name that is required to craft the output of the recipe. The block is not prefixed\r\n   // with 'minecraft:', so it will look like 'crafting_table' as an example.\r\n@@ -240,8 +238,7 @@ type FurnaceDataRecipe struct {\r\n \r\n // MultiRecipe serves as an 'enable' switch for multi-shape recipes.\r\n type MultiRecipe struct {\r\n-\t// UUID is a UUID identifying the recipe. This can actually be set to an empty UUID if the CraftingEvent\r\n-\t// packet is not used.\r\n+\t// UUID is a UUID identifying the recipe. Since the CraftingEvent packet no longer exists, this can always be empty.\r\n   UUID uuid.UUID\r\n   // RecipeNetworkID is a unique ID used to identify the recipe over network. Each recipe must have a unique\r\n   // network ID. Recommended is to just increment a variable for each unique recipe registered.\r\n```\r\n\r\nYour output should look like this:\r\n```json\r\n{\r\n  \"metadata_changed\": {\r\n    \"version\": { \"old\": \"1.20.40\", \"new\": \"1.20.50\", \"source\": [\"minecraft/protocol/info.go\"] },\r\n    \"protocol\": { \"old\": 622, \"new\": 630, \"source\": [\"minecraft/protocol/info.go\"] }\r\n  },\r\n  \"packets_removed\": {\r\n    \"crafting_event\": { \"source\": [\"minecraft/protocol/packet/crafting_event.go\"] }\r\n  },\r\n  \"packets_added\": {\r\n    \"player_toggle_crafter_slot_request\": { \"source\": [\"minecraft/protocol/packet/player_toggle_crafter_slot_request.go\"] },\r\n    \"set_player_inventory_options\": { \"source\": [\"minecraft/protocol/packet/set_player_inventory_options.go\"] }\r\n  },\r\n  \"packets_modified\": {\r\n    \"show_store_offer\": { \"source\": [\"minecraft/protocol/packet/show_store_offer.go\"] },\r\n    \"level_sound_event\": { \"source\": [\"minecraft/protocol/packet/level_sound_event.go\"] },\r\n    \"network_settings\": { \"source\": [\"minecraft/protocol/packet/network_settings.go\"] },\r\n    \"compression\": { \"source\": [\"minecraft/protocol/packet/compression.go\"] },\r\n    \"container\": { \"source\": [\"minecraft/protocol/container.go\"] }\r\n  },\r\n  \"unclassified_serializer_changes\": {\r\n    \"minecraft/protocol/packet/pool.go\": \"Added IDPlayerToggleCrafterSlotRequest to the packet pool\"\r\n  }\r\n}\r\n```","user":"Please convert the following git diff into the expected JSON output:\r\n```diff\r\ndiff --git a/minecraft/conn.go b/minecraft/conn.go\r\nindex 84bef5d1..ce1cbc39 100644\r\n--- a/minecraft/conn.go\r\n+++ b/minecraft/conn.go\r\n@@ -697,7 +697,7 @@ func (conn *Conn) handleRequestNetworkSettings(pk *packet.RequestNetworkSettings\r\n   }\r\n   _ = conn.Flush()\r\n   conn.enc.EnableCompression(conn.compression)\r\n-\tconn.dec.EnableCompression(conn.compression)\r\n+\tconn.dec.EnableCompression()\r\n   return nil\r\n }\r\n \r\n@@ -708,7 +708,7 @@ func (conn *Conn) handleNetworkSettings(pk *packet.NetworkSettings) error {\r\n     return fmt.Errorf(\"unknown compression algorithm: %v\", pk.CompressionAlgorithm)\r\n   }\r\n   conn.enc.EnableCompression(alg)\r\n-\tconn.dec.EnableCompression(alg)\r\n+\tconn.dec.EnableCompression()\r\n   conn.readyToLogin = true\r\n   return nil\r\n }\r\ndiff --git a/minecraft/protocol/info.go b/minecraft/protocol/info.go\r\nindex 7b091441..90fdcf4f 100644\r\n--- a/minecraft/protocol/info.go\r\n+++ b/minecraft/protocol/info.go\r\n@@ -2,7 +2,7 @@ package protocol\r\n \r\n const (\r\n   // CurrentProtocol is the current protocol version for the version below.\r\n-\tCurrentProtocol = 630\r\n+\tCurrentProtocol = 649\r\n   // CurrentVersion is the current version of Minecraft as supported by the `packet` package.\r\n-\tCurrentVersion = \"1.20.50\"\r\n+\tCurrentVersion = \"1.20.60\"\r\n )\r\ndiff --git a/minecraft/protocol/packet/add_entity.go b/minecraft/protocol/packet/add_entity.go\r\ndeleted file mode 100644\r\nindex 041a94e6..00000000\r\n--- a/minecraft/protocol/packet/add_entity.go\r\n+++ /dev/null\r\n@@ -1,21 +0,0 @@\r\n-package packet\r\n-\r\n-import (\r\n-\t\"github.com/sandertv/gophertunnel/minecraft/protocol\"\r\n-)\r\n-\r\n-// AddEntity is sent by the server to the client. Its function is not entirely clear: It does not add an\r\n-// entity in the sense of an in-game entity, but has to do with the ECS that Minecraft uses.\r\n-type AddEntity struct {\r\n-\t// EntityNetworkID is the network ID of the entity that should be added.\r\n-\tEntityNetworkID uint64\r\n-}\r\n-\r\n-// ID ...\r\n-func (pk *AddEntity) ID() uint32 {\r\n-\treturn IDAddEntity\r\n-}\r\n-\r\n-func (pk *AddEntity) Marshal(io protocol.IO) {\r\n-\tio.Varuint64(&pk.EntityNetworkID)\r\n-}\r\ndiff --git a/minecraft/protocol/packet/decoder.go b/minecraft/protocol/packet/decoder.go\r\nindex 5dd0e08e..458a93c9 100644\r\n--- a/minecraft/protocol/packet/decoder.go\r\n+++ b/minecraft/protocol/packet/decoder.go\r\n@@ -21,8 +21,8 @@ type Decoder struct {\r\n   // NewDecoder implements the packetReader interface.\r\n   pr packetReader\r\n \r\n-\tcompression Compression\r\n-\tencrypt     *encrypt\r\n+\tdecompress bool\r\n+\tencrypt    *encrypt\r\n \r\n   checkPacketLimit bool\r\n }\r\n@@ -56,8 +56,8 @@ func (decoder *Decoder) EnableEncryption(keyBytes [32]byte) {\r\n }\r\n \r\n // EnableCompression enables compression for the Decoder.\r\n-func (decoder *Decoder) EnableCompression(compression Compression) {\r\n-\tdecoder.compression = compression\r\n+func (decoder *Decoder) EnableCompression() {\r\n+\tdecoder.decompress = true\r\n }\r\n \r\n // DisableBatchPacketLimit disables the check that limits the number of packets allowed in a single packet\r\n@@ -104,10 +104,18 @@ func (decoder *Decoder) Decode() (packets [][]byte, err error) {\r\n     data = data[:len(data)-8]\r\n   }\r\n \r\n-\tif decoder.compression != nil {\r\n-\t\tdata, err = decoder.compression.Decompress(data)\r\n-\t\tif err != nil {\r\n-\t\t\treturn nil, fmt.Errorf(\"error decompressing packet: %v\", err)\r\n+\tif decoder.decompress {\r\n+\t\tif data[0] == 0xff {\r\n+\t\t\tdata = data[1:]\r\n+\t\t} else {\r\n+\t\t\tcompression, ok := CompressionByID(uint16(data[0]))\r\n+\t\t\tif !ok {\r\n+\t\t\t\treturn nil, fmt.Errorf(\"error decompressing packet: unknown compression algorithm %v\", data[0])\r\n+\t\t\t}\r\n+\t\t\tdata, err = compression.Decompress(data[1:])\r\n+\t\t\tif err != nil {\r\n+\t\t\t\treturn nil, fmt.Errorf(\"error decompressing packet: %v\", err)\r\n+\t\t\t}\r\n     }\r\n   }\r\n \r\ndiff --git a/minecraft/protocol/packet/encoder.go b/minecraft/protocol/packet/encoder.go\r\nindex d40d70cc..16e7cbba 100644\r\n--- a/minecraft/protocol/packet/encoder.go\r\n+++ b/minecraft/protocol/packet/encoder.go\r\n@@ -62,7 +62,9 @@ func (encoder *Encoder) Encode(packets [][]byte) error {\r\n   }\r\n \r\n   data := buf.Bytes()\r\n+\tprepend := []byte{header}\r\n   if encoder.compression != nil {\r\n+\t\tprepend = append(prepend, byte(encoder.compression.EncodeCompression()))\r\n     var err error\r\n     data, err = encoder.compression.Compress(data)\r\n     if err != nil {\r\n@@ -70,7 +72,7 @@ func (encoder *Encoder) Encode(packets [][]byte) error {\r\n     }\r\n   }\r\n \r\n-\tdata = append([]byte{header}, data...)\r\n+\tdata = append(prepend, data...)\r\n   if encoder.encrypt != nil {\r\n     // If the encryption session is not nil, encryption is enabled, meaning we should encrypt the\r\n     // compressed data of this packet.\r\ndiff --git a/minecraft/protocol/packet/id.go b/minecraft/protocol/packet/id.go\r\nindex e24abccc..0548215e 100644\r\n--- a/minecraft/protocol/packet/id.go\r\n+++ b/minecraft/protocol/packet/id.go\r\n@@ -127,8 +127,8 @@ const (\r\n   IDLevelEventGeneric\r\n   IDLecternUpdate\r\n   _\r\n-\tIDAddEntity\r\n-\tIDRemoveEntity\r\n+\t_\r\n+\t_\r\n   IDClientCacheStatus\r\n   IDMapCreateLockedCopy\r\n   IDOnScreenTextureAnimation\r\n@@ -208,4 +208,5 @@ const (\r\n   IDRefreshEntitlements\r\n   IDPlayerToggleCrafterSlotRequest\r\n   IDSetPlayerInventoryOptions\r\n+\tIDSetHud\r\n )\r\ndiff --git a/minecraft/protocol/packet/level_chunk.go b/minecraft/protocol/packet/level_chunk.go\r\nindex 0da79315..50ca3075 100644\r\n--- a/minecraft/protocol/packet/level_chunk.go\r\n+++ b/minecraft/protocol/packet/level_chunk.go\r\n@@ -11,6 +11,9 @@ type LevelChunk struct {\r\n   // Position contains the X and Z coordinates of the chunk sent. You can convert a block coordinate to a chunk\r\n   // coordinate by right-shifting it four bits.\r\n   Position protocol.ChunkPos\r\n+\t// Dimension is the ID of the dimension that the chunk belongs to. This must always be set otherwise the\r\n+\t// client will always assume the chunk is part of the overworld dimension.\r\n+\tDimension int32\r\n   // HighestSubChunk is the highest sub-chunk at the position that is not all air. It is only set if the\r\n   // SubChunkCount is set to protocol.SubChunkRequestModeLimited.\r\n   HighestSubChunk uint16\r\n@@ -46,6 +49,7 @@ func (*LevelChunk) ID() uint32 {\r\n \r\n func (pk *LevelChunk) Marshal(io protocol.IO) {\r\n   io.ChunkPos(&pk.Position)\r\n+\tio.Varint32(&pk.Dimension)\r\n   io.Varuint32(&pk.SubChunkCount)\r\n   if pk.SubChunkCount == protocol.SubChunkRequestModeLimited {\r\n     io.Uint16(&pk.HighestSubChunk)\r\ndiff --git a/minecraft/protocol/packet/level_event.go b/minecraft/protocol/packet/level_event.go\r\nindex 4b02bfaa..53751283 100644\r\n--- a/minecraft/protocol/packet/level_event.go\r\n+++ b/minecraft/protocol/packet/level_event.go\r\n@@ -7,123 +7,127 @@ import (\r\n \r\n // noinspection SpellCheckingInspection\r\n const (\r\n-\tLevelEventSoundClick                   = 1000\r\n-\tLevelEventSoundClickFail               = 1001\r\n-\tLevelEventSoundLaunch                  = 1002\r\n-\tLevelEventSoundOpenDoor                = 1003\r\n-\tLevelEventSoundFizz                    = 1004\r\n-\tLevelEventSoundFuse                    = 1005\r\n-\tLevelEventSoundPlayRecording           = 1006\r\n-\tLevelEventSoundGhastWarning            = 1007\r\n-\tLevelEventSoundGhastFireball           = 1008\r\n-\tLevelEventSoundBlazeFireball           = 1009\r\n-\tLevelEventSoundZombieWoodenDoor        = 1010\r\n-\tLevelEventSoundZombieDoorCrash         = 1012\r\n-\tLevelEventSoundZombieInfected          = 1016\r\n-\tLevelEventSoundZombieConverted         = 1017\r\n-\tLevelEventSoundEndermanTeleport        = 1018\r\n-\tLevelEventSoundAnvilBroken             = 1020\r\n-\tLevelEventSoundAnvilUsed               = 1021\r\n-\tLevelEventSoundAnvilLand               = 1022\r\n-\tLevelEventSoundInfinityArrowPickup     = 1030\r\n-\tLevelEventSoundTeleportEnderPearl      = 1032\r\n-\tLevelEventSoundAddItem                 = 1040\r\n-\tLevelEventSoundItemFrameBreak          = 1041\r\n-\tLevelEventSoundItemFramePlace          = 1042\r\n-\tLevelEventSoundItemFrameRemoveItem     = 1043\r\n-\tLevelEventSoundItemFrameRotateItem     = 1044\r\n-\tLevelEventSoundExperienceOrbPickup     = 1051\r\n-\tLevelEventSoundTotemUsed               = 1052\r\n-\tLevelEventSoundArmorStandBreak         = 1060\r\n-\tLevelEventSoundArmorStandHit           = 1061\r\n-\tLevelEventSoundArmorStandLand          = 1062\r\n-\tLevelEventSoundArmorStandPlace         = 1063\r\n-\tLevelEventSoundPointedDripstoneLand    = 1064\r\n-\tLevelEventSoundDyeUsed                 = 1065\r\n-\tLevelEventSoundInkSacUsed              = 1066\r\n-\tLevelEventSoundAmethystResonate        = 1067\r\n-\tLevelEventQueueCustomMusic             = 1900\r\n-\tLevelEventPlayCustomMusic              = 1901\r\n-\tLevelEventStopCustomMusic              = 1902\r\n-\tLevelEventSetMusicVolume               = 1903\r\n-\tLevelEventParticlesShoot               = 2000\r\n-\tLevelEventParticlesDestroyBlock        = 2001\r\n-\tLevelEventParticlesPotionSplash        = 2002\r\n-\tLevelEventParticlesEyeOfEnderDeath     = 2003\r\n-\tLevelEventParticlesMobBlockSpawn       = 2004\r\n-\tLevelEventParticleCropGrowth           = 2005\r\n-\tLevelEventParticleSoundGuardianGhost   = 2006\r\n-\tLevelEventParticleDeathSmoke           = 2007\r\n-\tLevelEventParticleDenyBlock            = 2008\r\n-\tLevelEventParticleGenericSpawn         = 2009\r\n-\tLevelEventParticlesDragonEgg           = 2010\r\n-\tLevelEventParticlesCropEaten           = 2011\r\n-\tLevelEventParticlesCritical            = 2012\r\n-\tLevelEventParticlesTeleport            = 2013\r\n-\tLevelEventParticlesCrackBlock          = 2014\r\n-\tLevelEventParticlesBubble              = 2015\r\n-\tLevelEventParticlesEvaporate           = 2016\r\n-\tLevelEventParticlesDestroyArmorStand   = 2017\r\n-\tLevelEventParticlesBreakingEgg         = 2018\r\n-\tLevelEventParticleDestroyEgg           = 2019\r\n-\tLevelEventParticlesEvaporateWater      = 2020\r\n-\tLevelEventParticlesDestroyBlockNoSound = 2021\r\n-\tLevelEventParticlesKnockbackRoar       = 2022\r\n-\tLevelEventParticlesTeleportTrail       = 2023\r\n-\tLevelEventParticlesPointCloud          = 2024\r\n-\tLevelEventParticlesExplosion           = 2025\r\n-\tLevelEventParticlesBlockExplosion      = 2026\r\n-\tLevelEventParticlesVibrationSignal     = 2027\r\n-\tLevelEventParticlesDripstoneDrip       = 2028\r\n-\tLevelEventParticlesFizzEffect          = 2029\r\n-\tLevelEventWaxOn                        = 2030\r\n-\tLevelEventWaxOff                       = 2031\r\n-\tLevelEventScrape                       = 2032\r\n-\tLevelEventParticlesElectricSpark       = 2033\r\n-\tLevelEventParticleTurtleEgg            = 2034\r\n-\tLevelEventParticleSculkShriek          = 2035\r\n-\tLevelEventSculkCatalystBloom           = 2036\r\n-\tLevelEventSculkCharge                  = 2037\r\n-\tLevelEventSculkChargePop               = 2038\r\n-\tLevelEventSonicExplosion               = 2039\r\n-\tLevelEventDustPlume                    = 2040\r\n-\tLevelEventStartRaining                 = 3001\r\n-\tLevelEventStartThunderstorm            = 3002\r\n-\tLevelEventStopRaining                  = 3003\r\n-\tLevelEventStopThunderstorm             = 3004\r\n-\tLevelEventGlobalPause                  = 3005\r\n-\tLevelEventSimTimeStep                  = 3006\r\n-\tLevelEventSimTimeScale                 = 3007\r\n-\tLevelEventActivateBlock                = 3500\r\n-\tLevelEventCauldronExplode              = 3501\r\n-\tLevelEventCauldronDyeArmor             = 3502\r\n-\tLevelEventCauldronCleanArmor           = 3503\r\n-\tLevelEventCauldronFillPotion           = 3504\r\n-\tLevelEventCauldronTakePotion           = 3505\r\n-\tLevelEventCauldronFillWater            = 3506\r\n-\tLevelEventCauldronTakeWater            = 3507\r\n-\tLevelEventCauldronAddDye               = 3508\r\n-\tLevelEventCauldronCleanBanner          = 3509\r\n-\tLevelEventCauldronFlush                = 3510\r\n-\tLevelEventAgentSpawnEffect             = 3511\r\n-\tLevelEventCauldronFillLava             = 3512\r\n-\tLevelEventCauldronTakeLava             = 3513\r\n-\tLevelEventCauldronFillPowderSnow       = 3514\r\n-\tLevelEventCauldronTakePowderSnow       = 3515\r\n-\tLevelEventStartBlockCracking           = 3600\r\n-\tLevelEventStopBlockCracking            = 3601\r\n-\tLevelEventUpdateBlockCracking          = 3602\r\n-\tLevelEventParticlesCrackBlockDown      = 3603\r\n-\tLevelEventParticlesCrackBlockUp        = 3604\r\n-\tLevelEventParticlesCrackBlockNorth     = 3605\r\n-\tLevelEventParticlesCrackBlockSouth     = 3606\r\n-\tLevelEventParticlesCrackBlockWest      = 3607\r\n-\tLevelEventParticlesCrackBlockEast      = 3608\r\n-\tLevelEventParticlesShootWhiteSmoke     = 3609\r\n-\tLevelEventAllPlayersSleeping           = 9800\r\n-\tLevelEventSleepingPlayers              = 9801\r\n-\tLevelEventJumpPrevented                = 9810\r\n-\tLevelEventParticleLegacyEvent          = 0x4000\r\n+\tLevelEventSoundClick                     = 1000\r\n+\tLevelEventSoundClickFail                 = 1001\r\n+\tLevelEventSoundLaunch                    = 1002\r\n+\tLevelEventSoundOpenDoor                  = 1003\r\n+\tLevelEventSoundFizz                      = 1004\r\n+\tLevelEventSoundFuse                      = 1005\r\n+\tLevelEventSoundPlayRecording             = 1006\r\n+\tLevelEventSoundGhastWarning              = 1007\r\n+\tLevelEventSoundGhastFireball             = 1008\r\n+\tLevelEventSoundBlazeFireball             = 1009\r\n+\tLevelEventSoundZombieWoodenDoor          = 1010\r\n+\tLevelEventSoundZombieDoorCrash           = 1012\r\n+\tLevelEventSoundZombieInfected            = 1016\r\n+\tLevelEventSoundZombieConverted           = 1017\r\n+\tLevelEventSoundEndermanTeleport          = 1018\r\n+\tLevelEventSoundAnvilBroken               = 1020\r\n+\tLevelEventSoundAnvilUsed                 = 1021\r\n+\tLevelEventSoundAnvilLand                 = 1022\r\n+\tLevelEventSoundInfinityArrowPickup       = 1030\r\n+\tLevelEventSoundTeleportEnderPearl        = 1032\r\n+\tLevelEventSoundAddItem                   = 1040\r\n+\tLevelEventSoundItemFrameBreak            = 1041\r\n+\tLevelEventSoundItemFramePlace            = 1042\r\n+\tLevelEventSoundItemFrameRemoveItem       = 1043\r\n+\tLevelEventSoundItemFrameRotateItem       = 1044\r\n+\tLevelEventSoundExperienceOrbPickup       = 1051\r\n+\tLevelEventSoundTotemUsed                 = 1052\r\n+\tLevelEventSoundArmorStandBreak           = 1060\r\n+\tLevelEventSoundArmorStandHit             = 1061\r\n+\tLevelEventSoundArmorStandLand            = 1062\r\n+\tLevelEventSoundArmorStandPlace           = 1063\r\n+\tLevelEventSoundPointedDripstoneLand      = 1064\r\n+\tLevelEventSoundDyeUsed                   = 1065\r\n+\tLevelEventSoundInkSacUsed                = 1066\r\n+\tLevelEventSoundAmethystResonate          = 1067\r\n+\tLevelEventQueueCustomMusic               = 1900\r\n+\tLevelEventPlayCustomMusic                = 1901\r\n+\tLevelEventStopCustomMusic                = 1902\r\n+\tLevelEventSetMusicVolume                 = 1903\r\n+\tLevelEventParticlesShoot                 = 2000\r\n+\tLevelEventParticlesDestroyBlock          = 2001\r\n+\tLevelEventParticlesPotionSplash          = 2002\r\n+\tLevelEventParticlesEyeOfEnderDeath       = 2003\r\n+\tLevelEventParticlesMobBlockSpawn         = 2004\r\n+\tLevelEventParticleCropGrowth             = 2005\r\n+\tLevelEventParticleSoundGuardianGhost     = 2006\r\n+\tLevelEventParticleDeathSmoke             = 2007\r\n+\tLevelEventParticleDenyBlock              = 2008\r\n+\tLevelEventParticleGenericSpawn           = 2009\r\n+\tLevelEventParticlesDragonEgg             = 2010\r\n+\tLevelEventParticlesCropEaten             = 2011\r\n+\tLevelEventParticlesCritical              = 2012\r\n+\tLevelEventParticlesTeleport              = 2013\r\n+\tLevelEventParticlesCrackBlock            = 2014\r\n+\tLevelEventParticlesBubble                = 2015\r\n+\tLevelEventParticlesEvaporate             = 2016\r\n+\tLevelEventParticlesDestroyArmorStand     = 2017\r\n+\tLevelEventParticlesBreakingEgg           = 2018\r\n+\tLevelEventParticleDestroyEgg             = 2019\r\n+\tLevelEventParticlesEvaporateWater        = 2020\r\n+\tLevelEventParticlesDestroyBlockNoSound   = 2021\r\n+\tLevelEventParticlesKnockbackRoar         = 2022\r\n+\tLevelEventParticlesTeleportTrail         = 2023\r\n+\tLevelEventParticlesPointCloud            = 2024\r\n+\tLevelEventParticlesExplosion             = 2025\r\n+\tLevelEventParticlesBlockExplosion        = 2026\r\n+\tLevelEventParticlesVibrationSignal       = 2027\r\n+\tLevelEventParticlesDripstoneDrip         = 2028\r\n+\tLevelEventParticlesFizzEffect            = 2029\r\n+\tLevelEventWaxOn                          = 2030\r\n+\tLevelEventWaxOff                         = 2031\r\n+\tLevelEventScrape                         = 2032\r\n+\tLevelEventParticlesElectricSpark         = 2033\r\n+\tLevelEventParticleTurtleEgg              = 2034\r\n+\tLevelEventParticleSculkShriek            = 2035\r\n+\tLevelEventSculkCatalystBloom             = 2036\r\n+\tLevelEventSculkCharge                    = 2037\r\n+\tLevelEventSculkChargePop                 = 2038\r\n+\tLevelEventSonicExplosion                 = 2039\r\n+\tLevelEventDustPlume                      = 2040\r\n+\tLevelEventStartRaining                   = 3001\r\n+\tLevelEventStartThunderstorm              = 3002\r\n+\tLevelEventStopRaining                    = 3003\r\n+\tLevelEventStopThunderstorm               = 3004\r\n+\tLevelEventGlobalPause                    = 3005\r\n+\tLevelEventSimTimeStep                    = 3006\r\n+\tLevelEventSimTimeScale                   = 3007\r\n+\tLevelEventActivateBlock                  = 3500\r\n+\tLevelEventCauldronExplode                = 3501\r\n+\tLevelEventCauldronDyeArmor               = 3502\r\n+\tLevelEventCauldronCleanArmor             = 3503\r\n+\tLevelEventCauldronFillPotion             = 3504\r\n+\tLevelEventCauldronTakePotion             = 3505\r\n+\tLevelEventCauldronFillWater              = 3506\r\n+\tLevelEventCauldronTakeWater              = 3507\r\n+\tLevelEventCauldronAddDye                 = 3508\r\n+\tLevelEventCauldronCleanBanner            = 3509\r\n+\tLevelEventCauldronFlush                  = 3510\r\n+\tLevelEventAgentSpawnEffect               = 3511\r\n+\tLevelEventCauldronFillLava               = 3512\r\n+\tLevelEventCauldronTakeLava               = 3513\r\n+\tLevelEventCauldronFillPowderSnow         = 3514\r\n+\tLevelEventCauldronTakePowderSnow         = 3515\r\n+\tLevelEventStartBlockCracking             = 3600\r\n+\tLevelEventStopBlockCracking              = 3601\r\n+\tLevelEventUpdateBlockCracking            = 3602\r\n+\tLevelEventParticlesCrackBlockDown        = 3603\r\n+\tLevelEventParticlesCrackBlockUp          = 3604\r\n+\tLevelEventParticlesCrackBlockNorth       = 3605\r\n+\tLevelEventParticlesCrackBlockSouth       = 3606\r\n+\tLevelEventParticlesCrackBlockWest        = 3607\r\n+\tLevelEventParticlesCrackBlockEast        = 3608\r\n+\tLevelEventParticlesShootWhiteSmoke       = 3609\r\n+\tLevelEventParticlesWindExplosion         = 3610\r\n+\tLevelEventParticlesTrialSpawnerDetection = 3611\r\n+\tLevelEventParticlesTrialSpawnerSpawning  = 3612\r\n+\tLevelEventParticlesTrialSpawnerEjecting  = 3613\r\n+\tLevelEventAllPlayersSleeping             = 9800\r\n+\tLevelEventSleepingPlayers                = 9801\r\n+\tLevelEventJumpPrevented                  = 9810\r\n+\tLevelEventParticleLegacyEvent            = 0x4000\r\n )\r\n \r\n // LevelEvent is sent by the server to make a certain event in the level occur. It ranges from particles, to\r\ndiff --git a/minecraft/protocol/packet/player_auth_input.go b/minecraft/protocol/packet/player_auth_input.go\r\nindex 9aae7b48..7a2576b4 100644\r\n--- a/minecraft/protocol/packet/player_auth_input.go\r\n+++ b/minecraft/protocol/packet/player_auth_input.go\r\n@@ -51,6 +51,7 @@ const (\r\n   InputFlagStartFlying\r\n   InputFlagStopFlying\r\n   InputFlagClientAckServerData\r\n+\tInputFlagClientPredictedVehicle\r\n )\r\n \r\n const (\r\n@@ -120,8 +121,10 @@ type PlayerAuthInput struct {\r\n   ItemStackRequest protocol.ItemStackRequest\r\n   // BlockActions is a slice of block actions that the client has interacted with.\r\n   BlockActions []protocol.PlayerBlockAction\r\n-\t// AnalogueMoveVector is a Vec2 that specifies the direction in which the player moved, as a combination of X/Z\r\n-\t// values which are created using an analogue input.\r\n+\t// ClientPredictedVehicle is the unique ID of the vehicle that the client predicts the player to be in.\r\n+\tClientPredictedVehicle int64\r\n+\t// AnalogueMoveVector is a Vec2 that specifies the direction in which the player moved, as a combination\r\n+\t// of X/Z values which are created using an analogue input.\r\n   AnalogueMoveVector mgl32.Vec2\r\n }\r\n \r\n@@ -154,6 +157,10 @@ func (pk *PlayerAuthInput) Marshal(io protocol.IO) {\r\n     protocol.Single(io, &pk.ItemStackRequest)\r\n   }\r\n \r\n+\tif pk.InputData&InputFlagClientPredictedVehicle != 0 {\r\n+\t\tio.Varint64(&pk.ClientPredictedVehicle)\r\n+\t}\r\n+\r\n   if pk.InputData&InputFlagPerformBlockActions != 0 {\r\n     protocol.SliceVarint32Length(io, &pk.BlockActions)\r\n   }\r\ndiff --git a/minecraft/protocol/packet/pool.go b/minecraft/protocol/packet/pool.go\r\nindex 7351a36c..3dbd3c11 100644\r\n--- a/minecraft/protocol/packet/pool.go\r\n+++ b/minecraft/protocol/packet/pool.go\r\n@@ -170,8 +170,6 @@ func init() {\r\n     IDLevelEventGeneric:           func() Packet { return &LevelEventGeneric{} },\r\n     IDLecternUpdate:               func() Packet { return &LecternUpdate{} },\r\n     // ---\r\n-\t\tIDAddEntity:                     func() Packet { return &AddEntity{} },\r\n-\t\tIDRemoveEntity:                  func() Packet { return &RemoveEntity{} },\r\n     IDClientCacheStatus:             func() Packet { return &ClientCacheStatus{} },\r\n     IDOnScreenTextureAnimation:      func() Packet { return &OnScreenTextureAnimation{} },\r\n     IDMapCreateLockedCopy:           func() Packet { return &MapCreateLockedCopy{} },\r\n@@ -252,6 +250,7 @@ func init() {\r\n     IDRefreshEntitlements:            func() Packet { return &RefreshEntitlements{} },\r\n     IDPlayerToggleCrafterSlotRequest: func() Packet { return &PlayerToggleCrafterSlotRequest{} },\r\n     IDSetPlayerInventoryOptions:      func() Packet { return &SetPlayerInventoryOptions{} },\r\n+\t\tIDSetHud:                         func() Packet { return &SetHud{} },\r\n   }\r\n   for id, pk := range serverOriginating {\r\n     RegisterPacketFromServer(id, pk)\r\ndiff --git a/minecraft/protocol/packet/remove_entity.go b/minecraft/protocol/packet/remove_entity.go\r\ndeleted file mode 100644\r\nindex 012587ce..00000000\r\n--- a/minecraft/protocol/packet/remove_entity.go\r\n+++ /dev/null\r\n@@ -1,21 +0,0 @@\r\n-package packet\r\n-\r\n-import (\r\n-\t\"github.com/sandertv/gophertunnel/minecraft/protocol\"\r\n-)\r\n-\r\n-// RemoveEntity is sent by the server to the client. Its function is not entirely clear: It does not remove an\r\n-// entity in the sense of an in-game entity, but has to do with the ECS that Minecraft uses.\r\n-type RemoveEntity struct {\r\n-\t// EntityNetworkID is the network ID of the entity that should be removed.\r\n-\tEntityNetworkID uint64\r\n-}\r\n-\r\n-// ID ...\r\n-func (pk *RemoveEntity) ID() uint32 {\r\n-\treturn IDRemoveEntity\r\n-}\r\n-\r\n-func (pk *RemoveEntity) Marshal(io protocol.IO) {\r\n-\tio.Varuint64(&pk.EntityNetworkID)\r\n-}\r\ndiff --git a/minecraft/protocol/packet/set_hud.go b/minecraft/protocol/packet/set_hud.go\r\nnew file mode 100644\r\nindex 00000000..8118f257\r\n--- /dev/null\r\n+++ b/minecraft/protocol/packet/set_hud.go\r\n@@ -0,0 +1,47 @@\r\n+package packet\r\n+\r\n+import (\r\n+\t\"github.com/sandertv/gophertunnel/minecraft/protocol\"\r\n+)\r\n+\r\n+const (\r\n+\tHudElementPaperDoll = iota\r\n+\tHudElementArmour\r\n+\tHudElementToolTips\r\n+\tHudElementTouchControls\r\n+\tHudElementCrosshair\r\n+\tHudElementHotBar\r\n+\tHudElementHealth\r\n+\tHudElementProgressBar\r\n+\tHudElementHunger\r\n+\tHudElementAirBubbles\r\n+\tHudElementHourseHealth\r\n+)\r\n+\r\n+const (\r\n+\tHudVisibilityHide = iota\r\n+\tHudVisibilityReset\r\n+)\r\n+\r\n+// SetHud is sent by the server to set the visibility of individual HUD elements on the client. It is\r\n+// important to note that the client does not reset the state of the HUD elements after it leaves a server,\r\n+// meaning they can leak into sessions on different servers. To be safe, you should reset the visibility of\r\n+// all HUD elements when a player connects.\r\n+type SetHud struct {\r\n+\t// Elements is a list of HUD elements that are being modified. The values can be any of the HudElement\r\n+\t// constants above.\r\n+\tElements []byte\r\n+\t// Visibility represents the new visibility of the specified Elements. It can be any of the HudVisibility\r\n+\t// constants above.\r\n+\tVisibility byte\r\n+}\r\n+\r\n+// ID ...\r\n+func (*SetHud) ID() uint32 {\r\n+\treturn IDSetHud\r\n+}\r\n+\r\n+func (pk *SetHud) Marshal(io protocol.IO) {\r\n+\tprotocol.FuncSlice(io, &pk.Elements, io.Uint8)\r\n+\tio.Uint8(&pk.Visibility)\r\n+}\r\ndiff --git a/minecraft/protocol/player.go b/minecraft/protocol/player.go\r\nindex 0871c53f..69633e7b 100644\r\n--- a/minecraft/protocol/player.go\r\n+++ b/minecraft/protocol/player.go\r\n@@ -79,6 +79,8 @@ type PlayerListEntry struct {\r\n   Teacher bool\r\n   // Host specifies if the player that is added to the player list is the host of the game.\r\n   Host bool\r\n+\t// SubClient specifies if the player that is added to the player list is a sub-client of another player.\r\n+\tSubClient bool\r\n }\r\n \r\n // Marshal encodes/decodes a PlayerListEntry.\r\n@@ -92,6 +94,7 @@ func (x *PlayerListEntry) Marshal(r IO) {\r\n   Single(r, &x.Skin)\r\n   r.Bool(&x.Teacher)\r\n   r.Bool(&x.Host)\r\n+\tr.Bool(&x.SubClient)\r\n }\r\n \r\n // PlayerListRemoveEntry encodes/decodes a PlayerListEntry for removal from the list.\r\n```"};
    const outputs = data.outputs;
    if ($psys) $psys.textContent = data.system;
    if ($pusr) $pusr.textContent = data.user;
    for (const [modelName, modelId] of data.models) {
      const $presp = document.getElementById('presp' + modelId);
      if ($presp) $presp.textContent = outputs[modelId];
    }
</script>
</body>
</html>
